# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    tags:
      - "*.*.*" # as used in script later this must not be prefixed by v
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

env:
  NGINX_VERSION: 1.27.2

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Install nginx source
        run: |
          source /etc/os-release
          curl https://nginx.org/keys/nginx_signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/nginx-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/$ID $VERSION_CODENAME nginx" | sudo tee -a /etc/apt/sources.list.d/nginx.list
          sudo apt update
      - name: Setup dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install --no-install-recommends --no-install-suggests -y nginx gnupg1 ca-certificates cmake gcc libc-dev make openssl libssl-dev curl gnupg wget git libxml2 libpcre3 libpcre3-dev libghc-zlib-dev
      - name: Pull modules
        run: |
          mkdir -p modules
          pushd modules
          git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli.git
          # prebuild brotli
          pushd ngx_brotli/deps/brotli && mkdir out && pushd cd out && \
              cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed .. && \
              cmake --build . --config Release --target brotlienc && popd
          popd

          git clone https://github.com/FRiCKLE/ngx_cache_purge
          git clone https://github.com/aperezdc/ngx-fancyindex.git
          git clone https://github.com/sergey-dryabzhinsky/nginx-rtmp-module
          git clone https://github.com/vozlt/nginx-module-vts

          # exit modules
          popd

      - name: Set nginx version to tag name
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "NGINX_VERSION=$GITHUB_REF_NAME" >> "$GITHUB_ENV"

      - name: Build modules
        run: |
          wget "https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -O /tmp/nginx.tar.gz
          CONFARGS=$(nginx -V 2>&1 | sed -n -e 's/^.*arguments: //p') \
                  tar -zxC . -f /tmp/nginx.tar.gz && \
          pushd nginx-$NGINX_VERSION && \
          ./configure --with-compat $CONFARGS \
                --add-dynamic-module=../modules/ngx_brotli \
                --add-dynamic-module=../modules/ngx_cache_purge \
                --add-dynamic-module=../modules/ngx-fancyindex \
                --add-dynamic-module=../modules/nginx-module-vts \
                --add-dynamic-module=../modules/nginx-rtmp-module && \
          make modules -j $(nproc)

      - uses: actions/upload-artifact@v4
        with:
          name: nginx-modules
          path: |
            nginx-*/objs/*.so

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            nginx-*/objs/*.so

      #- run: sudo apt-get install -y debhelper
      #- run: dpkg-buildpackage -A -rfakeroot -us -uc -d
      #- run: make source-package
